%% Import data from partial volume correction dataset 

% Auto-generated by MATLAB on 2019/01/22 15:45:15

function Partial_Vol_Corr = importfile_partial_vol(filename_partial_vol)
%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Read columns of data as text:
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename_partial_vol,'r','n','UTF-8');
% Skip the BOM (Byte Order Mark).
fseek(fileID, 3, 'bof');

%% Read columns of data according to the format.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Split data into numeric and string columns.
rawNumericColumns = raw(:, [3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]);
rawStringColumns = string(raw(:, [1,2,4]));


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Make sure any text containing <undefined> is properly converted to an <undefined> categorical
for catIdx = [2,3]
    idx = (rawStringColumns(:, catIdx) == "<undefined>");
    rawStringColumns(idx, catIdx) = "";
end

%% Create output variable
Partial_Vol_Corr = table;

%% Allocate imported array to column variable names
Partial_Vol_Corr.Subject_ID = cellstr(rawStringColumns(:, 1));
Partial_Vol_Corr.Stim_cond = categorical(rawStringColumns(:, 2));
Partial_Vol_Corr.Stim_cond_num = cell2mat(rawNumericColumns(:, 1));
Partial_Vol_Corr.PA_group = categorical(rawStringColumns(:, 3));
Partial_Vol_Corr.PA_group_num = cell2mat(rawNumericColumns(:, 2));
Partial_Vol_Corr.HP_pre_GM = cell2mat(rawNumericColumns(:, 3));
Partial_Vol_Corr.HP_post_GM = cell2mat(rawNumericColumns(:, 4));
Partial_Vol_Corr.PTL_pre_GM = cell2mat(rawNumericColumns(:, 5));
Partial_Vol_Corr.PTL_post_GM = cell2mat(rawNumericColumns(:, 6));
Partial_Vol_Corr.SMA_pre_GM = cell2mat(rawNumericColumns(:, 7));
Partial_Vol_Corr.SMA_post_GM = cell2mat(rawNumericColumns(:, 8));
Partial_Vol_Corr.HP_pre_total_vox = cell2mat(rawNumericColumns(:, 9));
Partial_Vol_Corr.HP_post_total_vox = cell2mat(rawNumericColumns(:, 10));
Partial_Vol_Corr.PTL_pre_total_vox = cell2mat(rawNumericColumns(:, 11));
Partial_Vol_Corr.PTL_post_total_vox = cell2mat(rawNumericColumns(:, 12));
Partial_Vol_Corr.SMA_pre_total_vox = cell2mat(rawNumericColumns(:, 13));
Partial_Vol_Corr.SMA_post_total_vox = cell2mat(rawNumericColumns(:, 14));
Partial_Vol_Corr.HP_pre_GM_vox = cell2mat(rawNumericColumns(:, 15));
Partial_Vol_Corr.HP_post_GM_vox = cell2mat(rawNumericColumns(:, 16));
Partial_Vol_Corr.PTL_pre_GM_vox = cell2mat(rawNumericColumns(:, 17));
Partial_Vol_Corr.PTL_post_GM_vox = cell2mat(rawNumericColumns(:, 18));
Partial_Vol_Corr.SMA_pre_GM_vox = cell2mat(rawNumericColumns(:, 19));
Partial_Vol_Corr.SMA_post_GM_vox = cell2mat(rawNumericColumns(:, 20));
Partial_Vol_Corr.HP_pre_WM_prop = cell2mat(rawNumericColumns(:, 21));
Partial_Vol_Corr.HP_post_WM_prop = cell2mat(rawNumericColumns(:, 22));
Partial_Vol_Corr.PTL_pre_WM_prop = cell2mat(rawNumericColumns(:, 23));
Partial_Vol_Corr.PTL_post_WM_prop = cell2mat(rawNumericColumns(:, 24));
Partial_Vol_Corr.SMA_pre_WM_prop = cell2mat(rawNumericColumns(:, 25));
Partial_Vol_Corr.SMA_post_WM_prop = cell2mat(rawNumericColumns(:, 26));
Partial_Vol_Corr.HP_pre_CSF_prop = cell2mat(rawNumericColumns(:, 27));
Partial_Vol_Corr.HP_post_CSF_prop = cell2mat(rawNumericColumns(:, 28));
Partial_Vol_Corr.PTL_pre_CSF_prop = cell2mat(rawNumericColumns(:, 29));
Partial_Vol_Corr.PTL_post_CSF_prop = cell2mat(rawNumericColumns(:, 30));
Partial_Vol_Corr.SMA_pre_CSF_prop = cell2mat(rawNumericColumns(:, 31));
Partial_Vol_Corr.SMA_post_CSF_prop = cell2mat(rawNumericColumns(:, 32));

